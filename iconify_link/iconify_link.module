<?php

/**
 * @file
 * Contains iconify_link.module..
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\node\NodeInterface;
use Drupal\menu_link_content\Entity\MenuLinkContent;
use Drupal\iconify\IconifyIconize;

/**
 * Implements hook_help().
 */
function iconify_link_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the iconify_link module.
    case 'help.page.iconify_link':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('The iconify link module provides a widget that allows users to add icons to links. It overtakes the core default widget for menu link content entities, allowing you to set icons on menu links.') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_entity_base_field_info_alter().
 */
function iconify_link_entity_base_field_info_alter(&$fields, EntityTypeInterface $entity_type) {
  if ($entity_type->id() === 'menu_link_content') {
    $fields['link']->setDisplayOptions('form', [
      'type' => 'iconify_link',
      'weight' => -2,
    ]);
  }
}

/**
 * Implements hook_module_implements_alter().
 */
function iconify_link_module_implements_alter(&$implementations, $hook) {
  if ($hook == 'form_node_form_alter') {
    unset($implementations['menu_ui']);
    // Move iconify_link_form_node_form_alter() to the end of the list.
    $group = $implementations['iconify_link'];
    unset($implementations['iconify_link']);
    $implementations['iconify_link'] = $group;
  }
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function iconify_link_form_node_form_alter(array &$form, FormStateInterface $form_state, $form_id) {
  if (function_exists('menu_ui_form_node_form_alter')) {
    menu_ui_form_node_form_alter($form, $form_state, $form_id);
    if (isset($form['menu'])) {
      $node = $form_state->getFormObject()->getEntity();
      $defaults = menu_ui_get_menu_link_defaults($node);
      $options = [];
      if ($defaults['entity_id']) {
        $menu = MenuLinkContent::load($defaults['entity_id']);
        $options = $menu->get('link')->first()->get('options')->getValue();
      }
      $config = \Drupal::config('iconify_link.config');
      $form['menu']['link']['title']['#weight'] = -2;
      $form['menu']['link']['options']['#tree'] = TRUE;
      $form['menu']['link']['options']['#weight'] = -1;
      $form['menu']['link']['options']['attributes']['#tree'] = TRUE;
      $form['menu']['link']['options']['attributes']['data-icon'] = [
        '#type' => 'iconify',
        '#title' => t('Icon'),
        '#default_value' => isset($options['attributes']['data-icon']) ? $options['attributes']['data-icon'] : NULL,
        '#packages' => $config->get('packages'),
        '#access' => \Drupal::currentUser()->hasPermission('use iconify link'),
      ];
      foreach (array_keys($form['actions']) as $action) {
        if ($action != 'preview' && isset($form['actions'][$action]['#type']) && $form['actions'][$action]['#type'] === 'submit') {
          if(($key = array_search('menu_ui_form_node_form_submit', $form['actions'][$action]['#submit'])) !== false) {
            $form['actions'][$action]['#submit'][$key] = 'iconify_link_menu_ui_form_node_form_submit';
          }
        }
      }
    }
  }
}

/**
 * Form submission handler for menu item field on the node form.
 *
 * @see menu_ui_form_node_form_submit()
 */
function iconify_link_menu_ui_form_node_form_submit($form, FormStateInterface $form_state) {
  $node = $form_state->getFormObject()->getEntity();
  if (!$form_state->isValueEmpty('menu')) {
    $values = $form_state->getValue('menu');
    if (empty($values['enabled'])) {
      if ($values['entity_id']) {
        $entity = MenuLinkContent::load($values['entity_id']);
        $entity->delete();
      }
    }
    elseif (trim($values['title'])) {
      // Decompose the selected menu parent option into 'menu_name' and 'parent',
      // if the form used the default parent selection widget.
      if (!empty($values['menu_parent'])) {
        list($menu_name, $parent) = explode(':', $values['menu_parent'], 2);
        $values['menu_name'] = $menu_name;
        $values['parent'] = $parent;
      }
      _iconify_link_menu_ui_node_save($node, $values);
    }
  }
}

/**
 * Helper function to create or update a menu link for a node.
 *
 * @see _menu_ui_node_save().
 *
 * @param \Drupal\node\NodeInterface $node
 *   Node entity.
 * @param array $values
 *   Values for the menu link.
 */
function _iconify_link_menu_ui_node_save(NodeInterface $node, array $values) {
  /** @var \Drupal\menu_link_content\MenuLinkContentInterface $entity */
  if (!empty($values['entity_id'])) {
    $entity = MenuLinkContent::load($values['entity_id']);
    if ($entity->isTranslatable()) {
      if (!$entity->hasTranslation($node->language()->getId())) {
        $entity = $entity->addTranslation($node->language()->getId(), $entity->toArray());
      }
      else {
        $entity = $entity->getTranslation($node->language()->getId());
      }
    }
  }
  else {
    // Create a new menu_link_content entity.
    $entity = MenuLinkContent::create(array(
      'link' => ['uri' => 'entity:node/' . $node->id()],
      'langcode' => $node->language()->getId(),
    ));
    $entity->enabled->value = 1;
  }
  $entity->title->value = trim($values['title']);
  $entity->description->value = trim($values['description']);
  $entity->link->options = $values['options'];
  $entity->menu_name->value = $values['menu_name'];
  $entity->parent->value = $values['parent'];
  $entity->weight->value = isset($values['weight']) ? $values['weight'] : 0;
  $entity->save();
}

/**
 * Implements hook_preprocess_menu().
 */
function iconify_link_preprocess_menu(&$vars) {
  $config = \Drupal::config('iconify_link.config');
  if ($config->get('menu_enable')) {
    foreach ($vars['items'] as &$item) {
      $options = $item['url']->getOptions();
      if (!empty($options['attributes']['data-icon'])) {
        $item['title'] = IconifyIconize::iconize($item['title'])->setIcon($options['attributes']['data-icon'])->render();
      }
    }
  }
}
